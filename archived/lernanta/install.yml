---
# This playbook sets up lernanta on a server.
# pass the host and user as extra variables.
# TODO: add hosts file in repo so that we don't need /etc/ansible/hosts
# - split up playbook and set up staging and live playbooks
# - use inventory

- hosts: $host
  user: $user
  sudo: yes
  vars:
    lernanta_venv: "/opt/lernanta_venv/"
  tasks:

  - name: Update apt packages
    apt: update-cache=yes

  - name: Install required software packages
    apt: pkg=$item state=installed
    with_items:
    - git
    - mysql-server
    - mysql-client
    - python-mysqldb
    - python-dev
    - python-setuptools
    - python-lxml
    - libssl-dev
    - python-imaging
    - python-m2crypto
    - gettext
    - python-iso8601
    - make
    - swig
    - apache2
    - libapache2-mod-wsgi
    - rabbitmq-server
    - memcached

  - name: create lernanta user
    user: name=lernanta

  - name: check out lernanta code
    git: repo=https://github.com/p2pu/lernanta.git dest=/opt/lernanta

  - name: update permissions for lernanta directory
    command: /bin/chown -R lernanta:lernanta /opt/lernanta

  - name: create lernanta.log file
    command: /usr/bin/touch /opt/lernanta/lernanta/lernanta.log

    #TODO move this to a folder where www-data has write permissions?
  - name: set permissions for lernanta.log
    file: path=/opt/lernanta/lernanta/lernanta.log state=file owner=lernanta group=www-data mode=0664

  - name: create static_serv directory
    file: path=/opt/lernanta/lernanta/static_serv state=directory owner=lernanta group=www-data mode=0775

  - name: install pip and virtuan env
    easy_install: name=$item
    with_items:
    - pip
    - virtualenv

  - name: get path for virtuanenv
    command: /usr/bin/which virtualenv
    register: virtualenv

  - name: create python virtual environment
    command: ${virtualenv.stdout} --system-site-packages $lernanta_venv

  - name: install lernanta dependencies in virtual environment
    pip: requirements=/opt/lernanta/lernanta/requirements/prod.txt virtualenv=$lernanta_venv 

  - name: configure lernanta settings_local.py
    template: src=templates/opt_lernanta_lernanta_settings_local.py.j2 dest=/opt/lernanta/lernanta/settings_local.py mode=0640 owner=lernanta group=www-data

  - name: set permissions for media directory so that apache can write to it
    command: /bin/chown -R lernanta:www-data /opt/lernanta/lernanta/media

  - name: set mode for media directory
    command: /bin/chmod 0775 /opt/lernanta/lernanta/media

  - name: configure lernanta wsgi script
    template: src=templates/opt_lernanta_lernanta_wsgi_production.wsgi.j2 dest=/opt/lernanta/lernanta/wsgi/production.wsgi

  - name: create lernanta database
    mysql_db: name=$lernanta_db_name encoding=utf8 state=present

  - name: create lernanta mysql user
    mysql_user: name=$lernanta_db_user password=$lernanta_db_password priv=${lernanta_db_name}.*:ALL state=present

  - name: run syncdb
    command: $lernanta_venv/bin/python /opt/lernanta/lernanta/manage.py syncdb --noinput

  # TODO: The following two steps should probably be corrected in the lernanta code, not here.
  - name: copy sql script to create site entry in database
    copy: src=files/django_site.sql dest=/tmp/django_site.sql

  - name: create correct values in sites table
    mysql_db: name=$lernanta_db_name state=import target=/tmp/django_site.sql login_user=$lernanta_db_user login_password=$lernanta_db_password

  - name: add rabbitmq vhost
    rabbitmq_vhost: name=lernanta_vhost state=present

  - name: create rabbitmq user
    rabbitmq_user: user=$lernanta_rabbitmq_broker_user password=$lernanta_rabbitmq_broker_password vhost=lernanta_vhost configure_priv=.* read_priv=.* write_priv=.* state=present

  - name: celeryd config
    template: src=templates/etc_default_celeryd.j2 dest=/etc/default/celeryd

  - name: celerybeat config
    template: src=templates/etc_default_celerybeat.j2 dest=/etc/default/celerybeat

  - name: copy celeryd startup script
    copy: src=files/$item dest=/etc/init.d/$item mode=0755
    with_items:
    - celeryd
    - celerybeat

  - name: start celeryd services
    service: name=celeryd state=started

  - name: start celerybeat services
    service: name=celerybeat state=started

  - name: run collectstatic
    command: $lernanta_venv/bin/python /opt/lernanta/lernanta/manage.py collectstatic --noinput

  - name: configure lernanta vhost
    template: src=templates/etc_apache2_sites-available_lernanta.j2 dest=/etc/apache2/sites-available/lernanta

  - name: configure lernanta-ssl vhost
    template: src=templates/etc_apache2_sites-available_lernanta-ssl.j2 dest=/etc/apache2/sites-available/lernanta-ssl

  - name: enable mod rewrite and ssl
    command: /usr/sbin/a2enmod rewrite ssl
    notify:
    - restart apache

  - name: create ssl directory
    file: path=/etc/apache2/ssl state=directory

  - name: copy ssl certificate files
    copy: src=files/$host/$item dest=/etc/apache2/ssl/$item mode=0600
    with_items:
    - public.crt
    - private.key
    #- intermediate.crt

  # TODO - After enabling the SSL host, Apache requires a password to start
  - name: enable lernanta vhost
    command: /usr/sbin/a2ensite lernanta lernanta-ssl
    notify:
    - restart apache

  handlers:
  - name: restart apache
    service: name=apache2 state=restarted
