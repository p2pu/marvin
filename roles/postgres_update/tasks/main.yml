---
- name: dump current db
  shell: docker exec p2pu-postgres pg_dumpall -U "{{ PG_ADMIN_USER }}" > /root/db-migrate.dump

- name: start new postgres docker image
  docker_container:
    name: new-postgres
    image: "postgres:{{ NEW_VERSION }}"
    state: started
    pull: yes
    restart: yes
    restart_policy: always
    volumes:
    - "/var/p2pu/volumes/postgres-{{ NEW_VERSION }}/data:/var/lib/postgresql/data"
    env:
      POSTGRES_USER: "{{ PG_ADMIN_USER }}"
      POSTGRES_PASSWORD: "{{ PG_ADMIN_PASSWORD }}"

- name: wait for postgres startup
  shell: "docker run --rm --link new-postgres:postgres postgres:{{ NEW_VERSION }} pg_isready -h postgres"
  register: result
  until: result.stdout.find("accepting connections") != -1
  retries: 10
  delay: 10

- name: load database dump
  shell: docker exec -i new-postgres psql -U "{{ PG_ADMIN_USER }}" < /root/db-migrate.dump

- name: set postgres password again to ensure it uses the default encryption
  shell: docker exec -i new-postgres psql -U "{{ PG_ADMIN_USER }}" -c "ALTER ROLE postgres WITH LOGIN PASSWORD '{{PG_ADMIN_PASSWORD}}'"

- name: Remove postgres container used to migrate
  docker_container:
    name: new-postgres
    image: "postgres:{{ NEW_VERSION }}"
    state: absent
    keep_volumes: yes

- name: remove database dump
  file:
    path: /root/db-migrate.dump
    state: absent
